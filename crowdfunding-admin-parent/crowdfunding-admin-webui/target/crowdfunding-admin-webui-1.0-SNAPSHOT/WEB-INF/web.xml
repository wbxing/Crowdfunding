<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">
    <!-- 字符集过滤器 -->
    <!-- 这个过滤器必须在所有过滤器前面 -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <!-- 指定字符集 -->
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <!-- 强制请求字符集 -->
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <!-- 强制响应字符集 -->
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- Spring 配置文件位置 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-persist-*.xml</param-value>
    </context-param>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <!-- SpringMVC 配置文件位置 -->
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-web-mvc.xml</param-value>
        </init-param>
        <!-- Selvet 默认生命周期中，创建对象是在第一次接收到请求时 -->
        <!-- 而 DispatcherServlet 中有大量的框架初始化工作，不适合在第一次请求时初始化 -->
        <!-- <load-on-startup 为了让 DispatcherServlet 在 web 启动时初始化 -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- Map all requests to the DispatcherServlet for handling -->
    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <!-- url-pattern 配置方式1 / 表示拦截所有请求 -->
        <!-- <url-pattern>/</url-pattern> -->
        <!-- url-pattern 配置方式2 配置请求扩展名 -->
        <!-- 优点1 *.css; *.js; *.png 等静态资源不经过 SpringMVC 不需要特殊处理 -->
        <!-- 优点2 实现伪静态效果 -->
        <!-- 伪静态优点1 增加入侵难度 -->
        <!-- 伪静态优点2 有利于 SEO 优化（让搜索引擎更容易找到） -->
        <!-- 缺点 不符合 RESTFUL 风格 -->
        <url-pattern>*.html</url-pattern>
        <!-- 如果一个 Ajax 请求的扩展名是 html 而服务器返回时是 json 数据，二者不匹配会造成 406 错误 -->
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>

</web-app>